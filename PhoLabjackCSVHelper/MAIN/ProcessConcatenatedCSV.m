function [OutputDeltaIdxs,OutputDeltaTimestamps,labjackData,outputFilePath] = ProcessConcatenatedCSV(inputFilePath)
%% PostProcessConcatenatedCSV.m
% Parses a .csv file generated by either�phoBehavioralBoxLabjack,Controller, Labjack's LJLogM�program,
% or several .CSV files of these formats that have been properly concatenated such as with BuildAllCombinedCSVz.m
%  The Arduino running the  behavior box code is connected to the Labjack's digital input ports. 
% 'SensorChanged' and 'Dispense' events are logged and stored in the .csv file. This script�parses those
% beambreak state changed signals into times where the beam is broken and when it isn't and then calls 
% further post-processing scripts to save them as )compressed.mat versions of the data adjuacent to input csv.
% Parses one CSV at a time for now.
% 
% INPUTS
% inputFilePath: Path of a single .csv file to be processed
% 
% OUTPUTS
% FinalOutputDeltas
% FinalOutputDeltaTimestamps
% labjackdata
% outputFilePath: Path to written _compressed.mat file 


% %% setting paths for function 
% thisfuncpath = mfilename('fullpath');
% tpath1 = fileparts(thisfuncpath);
% tpath2 = fileparts(tpath1);
% addpath(genpath(fullfile(tpath2,'HelperFunctions')));
% addpath(genpath(fullfile(tpath2,'CompressedEventsFormat')));
% % addpath(genpath('../HelperFunctions'));
% % addpath(genpath('../CompressedEventsFormat'));

%% Set default datetime display properties (this doesn't affect the values stored, only their display/preview in MATLAB)
% datetime.setDefaultFormats('default','yyyy-MM-dd HH:mm:ss.SSS');
% time_reference = datenum('1970', 'yyyy');
if ~exist('inputFilePath','var')
    [fileName, parentPath] = uigetfile('*.csv;*.mat', 'Select a Labjack(s) exported .CSV File', 'MultiSelect', 'off');
    outputFilePath = fullfile(parentPath,fileName);
else
    outputFilePath = inputFilePath;
end

%%
% labjackData = importCombinedLabjackCSV(filePath); 
labjackData = importCombinedLabjackCSV_BW(outputFilePath); 

% labjackData.dateTime = datetime(labjackData.Time, 'convertFrom','epochtime','Epoch','1904-01-01');
labjackData.dateTime = datetime(labjackData.Time, 'convertFrom','epochtime','TicksPerSecond',1e3,'Format','dd-MMM-yyyy HH:mm:ss.SSSSSSSSS');
labjackData.dateTime = labjackData.dateTime - hours(5); % to translate from GMT to Michigan timezone
%labjackData.intraSampleTime = [0; diff(labjackData.dateTime)];
labjackData.intraSampleTime = [0; diff(labjackData.Time)];
labjackData.samplingRate = round(1.0 ./ labjackData.intraSampleTime);%BW: Why round? - makes everything zero
avgSamplingRate = mean(labjackData.samplingRate(2:end));

% Convert the table to a timetable
labjackTimeTable = table2timetable(labjackData,'RowTimes','dateTime');

labjackTimeTable.intraSampleTime = [0; diff(labjackTimeTable.Time)];

% mean(diff(labjackTimeTable.Time))

%% Video File Analysis:
% videoFile = videoFilesData(1);
% %labjackData.relativeVideoFileTimes = labjackData.dateTime - videoFile.parsedDateTime;
% duration = videoFile.parsedEndDateTime - videoFile.parsedDateTime
% labjackData.relativeVideoFileTimes = (labjackData.dateTime - videoFile.parsedDateTime) + duration;
% outOfBoundsIndicies = find(isbetween(labjackData.dateTime, videoFile.parsedDateTime, videoFile.parsedEndDateTime));
% labjackData.relativeVideoFileTimes(outOfBoundsIndicies) = NaN;

%labjackData.relativeVideoFileTimes = rowfun(videoFilesData(1).getRelativeTime, labjackData.dateTime) ;


%% Transitions Analysis
disp('BeamBreak Events:')
beambreakTransitions.DIO0_Water1_BeamBreak = [0; diff(labjackData.DIO0)];
beambreakTransitions.DIO1_Water2_BeamBreak = [0; diff(labjackData.DIO1)];
beambreakTransitions.DIO2_Food1_BeamBreak = [0; diff(labjackData.DIO2)];
beambreakTransitions.DIO3_Food2_BeamBreak = [0; diff(labjackData.DIO3)];

% Look for transitions to negative values (falling edges)
beambreakTransitionsIndicies.DIO0_Water1_BeamBreak = find(beambreakTransitions.DIO0_Water1_BeamBreak < -0.01);
beambreakTransitionsIndicies.DIO1_Water2_BeamBreak = find(beambreakTransitions.DIO1_Water2_BeamBreak < -0.01);
beambreakTransitionsIndicies.DIO2_Food1_BeamBreak = find(beambreakTransitions.DIO2_Food1_BeamBreak < -0.01);
beambreakTransitionsIndicies.DIO3_Food2_BeamBreak = find(beambreakTransitions.DIO3_Food2_BeamBreak < -0.01);

EventCounts.DIO0_Water1_BeamBreak = length(beambreakTransitionsIndicies.DIO0_Water1_BeamBreak);
EventCounts.DIO1_Water2_BeamBreak = length(beambreakTransitionsIndicies.DIO1_Water2_BeamBreak);
EventCounts.DIO2_Food1_BeamBreak = length(beambreakTransitionsIndicies.DIO2_Food1_BeamBreak);
EventCounts.DIO3_Food2_BeamBreak = length(beambreakTransitionsIndicies.DIO3_Food2_BeamBreak);

% numSamples = length(beambreakTransitions.DIO0_Water1_BeamBreak);
numSamples = size(labjackTimeTable,1);

labjackTimeTable.DIO0_Water1_BeamBreak = zeros([numSamples 1]);
labjackTimeTable.DIO1_Water2_BeamBreak = zeros([numSamples 1]);
labjackTimeTable.DIO2_Food1_BeamBreak = zeros([numSamples 1]);
labjackTimeTable.DIO3_Food2_BeamBreak = zeros([numSamples 1]);

labjackTimeTable.DIO0_Water1_BeamBreak(beambreakTransitionsIndicies.DIO0_Water1_BeamBreak) = 1.0;
labjackTimeTable.DIO1_Water2_BeamBreak(beambreakTransitionsIndicies.DIO1_Water2_BeamBreak) = 1.0;
labjackTimeTable.DIO2_Food1_BeamBreak(beambreakTransitionsIndicies.DIO2_Food1_BeamBreak) = 1.0;
labjackTimeTable.DIO3_Food2_BeamBreak(beambreakTransitionsIndicies.DIO3_Food2_BeamBreak) = 1.0;



%% Dispense Events
disp('Dispense Events:')
beambreakTransitions.DIO0_Water1_Dispense = [0; diff(labjackData.DIO4)];
beambreakTransitions.DIO1_Water2_Dispense = [0; diff(labjackData.DIO5)];
beambreakTransitions.DIO2_Food1_Dispense = [0; diff(labjackData.DIO6)];
beambreakTransitions.DIO3_Food2_Dispense = [0; diff(labjackData.DIO7)];

beambreakTransitionsIndicies.DIO0_Water1_Dispense = find(beambreakTransitions.DIO0_Water1_Dispense > 0.01);
beambreakTransitionsIndicies.DIO1_Water2_Dispense = find(beambreakTransitions.DIO1_Water2_Dispense > 0.01);
beambreakTransitionsIndicies.DIO2_Food1_Dispense = find(beambreakTransitions.DIO2_Food1_Dispense > 0.01);
beambreakTransitionsIndicies.DIO3_Food2_Dispense = find(beambreakTransitions.DIO3_Food2_Dispense > 0.01);

% Look for transitions to negative values (falling edges)
% beambreakTransitionsIndicies.DIO0_Water1_Dispense = find(beambreakTransitions.DIO0_Water1_Dispense < -0.01);
% beambreakTransitionsIndicies.DIO1_Water2_Dispense = find(beambreakTransitions.DIO1_Water2_Dispense < -0.01);
% beambreakTransitionsIndicies.DIO2_Food1_Dispense = find(beambreakTransitions.DIO2_Food1_Dispense < -0.01);
% beambreakTransitionsIndicies.DIO3_Food2_Dispense = find(beambreakTransitions.DIO3_Food2_Dispense < -0.01);

EventCounts.DIO0_Water1_Dispense = length(beambreakTransitionsIndicies.DIO0_Water1_Dispense);
EventCounts.DIO1_Water2_Dispense = length(beambreakTransitionsIndicies.DIO1_Water2_Dispense);
EventCounts.DIO2_Food1_Dispense = length(beambreakTransitionsIndicies.DIO2_Food1_Dispense);
EventCounts.DIO3_Food2_Dispense = length(beambreakTransitionsIndicies.DIO3_Food2_Dispense);

labjackTimeTable.DIO0_Water1_Dispense = zeros([numSamples 1]);
labjackTimeTable.DIO1_Water2_Dispense = zeros([numSamples 1]);
labjackTimeTable.DIO2_Food1_Dispense = zeros([numSamples 1]);
labjackTimeTable.DIO3_Food2_Dispense = zeros([numSamples 1]);

labjackTimeTable.DIO0_Water1_Dispense(beambreakTransitionsIndicies.DIO0_Water1_Dispense) = 1.0;
labjackTimeTable.DIO1_Water2_Dispense(beambreakTransitionsIndicies.DIO1_Water2_Dispense) = 1.0;
labjackTimeTable.DIO2_Food1_Dispense(beambreakTransitionsIndicies.DIO2_Food1_Dispense) = 1.0;
labjackTimeTable.DIO3_Food2_Dispense(beambreakTransitionsIndicies.DIO3_Food2_Dispense) = 1.0;


%% Neuroscope Output Times
recordingStartTime = labjackData.dateTime(1);

transitionTimes.DIO0_Water1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO0_Water1_BeamBreak);
transitionTimes.DIO1_Water2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO1_Water2_BeamBreak);
transitionTimes.DIO2_Food1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO2_Food1_BeamBreak);
transitionTimes.DIO3_Food2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO3_Food2_BeamBreak);

% Computes relative to recording start:
transitionTimes.DIO0_Water1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO0_Water1_BeamBreak) - recordingStartTime;
transitionTimes.DIO1_Water2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO1_Water2_BeamBreak) - recordingStartTime;
transitionTimes.DIO2_Food1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO2_Food1_BeamBreak) - recordingStartTime;
transitionTimes.DIO3_Food2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.DIO3_Food2_BeamBreak) - recordingStartTime;



%[FinalOutputDeltas, FinalOutputDeltaTimestamps,compressedFilepath] = SaveEventOnlyCompressed(labjackData,beambreakTransitions,beambreakTransitionsIndicies, inputFilePath);
% function [FinalOutputDeltas, FinalOutputDeltaTimestamps,compresssedFilePath] = SaveEventOnlyCompressed(labjackData,beambreakTransitions,beambreakTransitionsIndicies,inputFilePath)

OutputDeltaIdxs = beambreakTransitionsIndicies;

% Look for transitions to negative values (falling edges)
OutputDeltaIdxs.DIO0_Water1_Dispense = find(beambreakTransitions.DIO0_Water1_Dispense < -0.01);
OutputDeltaIdxs.DIO1_Water2_Dispense = find(beambreakTransitions.DIO1_Water2_Dispense < -0.01);
OutputDeltaIdxs.DIO2_Food1_Dispense = find(beambreakTransitions.DIO2_Food1_Dispense < -0.01);
OutputDeltaIdxs.DIO3_Food2_Dispense = find(beambreakTransitions.DIO3_Food2_Dispense < -0.01);

fields = fieldnames(OutputDeltaIdxs);
for i = 1:numel(fields)
    OutputDeltaTimestamps.(fields{i}) = labjackData.dateTime(OutputDeltaIdxs.(fields{i}));
end



% relTimes = struct2table(transitionTimes) - recordingStartTime;

%transitionTimesTable = table(transitionTimes.DIO0_Water1_BeamBreak, transitionTimes.DIO1_Water2_BeamBreak, transitionTimes.DIO2_Food1_BeamBreak, transitionTimes.DIO3_Food2_BeamBreak);
%transitionTimesTable.relativeTimes = 

% EventCounts;


%dailyMean = retime(labjackTimeTable,'daily','mean');
%histcounts
%TT = retime(labjackTimeTable,'daily','sum');
%TT = retime(labjackTimeTable,'hourly','sum','IncludedEdge','right');
% binnedEventsTimetable = retime(labjackTimeTable(:,11:end),'hourly','sum','IncludedEdge','right');
% [fig] = PlotBinnedEventsTimetable(binnedEventsTimetable, 'Port Events: binned hourly');

% binnedEventsTimetable = retime(labjackTimeTable(:,11:end),'daily','sum','IncludedEdge','right');
% [fig, axH] = PlotBinnedEventsTimetable(binnedEventsTimetable, 'Port Events: binned daily');

%% Stacked Plot output: RAW Data
% figure(1)
% clf;
% % Format Output Variables
% vars = {{'Water1_BeamBreak','Water1_Dispense'},{'Water2_BeamBreak','Water2_Dispense'},{'Food1_BeamBreak','Food1_Dispense'},{'Food2_BeamBreak','Food2_Dispense'}};
% newYlabels = {'Water0','Water1','Food0','Food1'};
% stackedAggregatePlot = stackedplot(TT,vars,'DisplayLabels',newYlabels);
% title('Parsed Labjack Events')
% stackedAggregatePlot.LineProperties(1).PlotType = 'stairs';
% stackedAggregatePlot.LineProperties(2).PlotType = 'stairs';
% stackedAggregatePlot.LineProperties(3).PlotType = 'stairs';
% stackedAggregatePlot.LineProperties(4).PlotType = 'stairs';
% 
% %% Stacked Plot output: Binned Events
% figure(2)
% clf;
% % Format Output Variables
% vars = {{'DIO0','DIO4'},{'DIO1','DIO5'},{'DIO2','DIO6'},{'DIO3','DIO7'},'TEMPERATURE_AIR_K'};
% degreeSymbol = char(176);
% newYlabels = {'Water0','Water1','Food0','Food1',['T (' degreeSymbol 'F)']};
% %stackedplot(labjackTimeTable,vars,'XVariable','dateTime','DisplayLabels',newYlabels);
% stackedRawPlot = stackedplot(labjackTimeTable,vars,'DisplayLabels',newYlabels);
% title('Raw Labjack Data')

%%
% Compute the difference between each time in milliseconds. Include 0 as the offset for the first point.
% labjackData.IntraSampleDelay = [0; diff(labjackData.Time)];
% labjackData.IntraSampleDelay.Format = 'hh:mm:ss.SSSSSSS';
% labjackData.MillisecondDiff = milliseconds(labjackData.IntraSampleDelay);
% Compute the relativeMillisecondsSinceRecordingStart
%labjackData.relativeMillisecondsSinceRecordingStart = CumSum(labjackData.MillisecondDiff);

%% Find the relevent entries in the table and create a subtable
%%
%beambreakSignalsTable = labjackData((labjackData.ErrorCode == 0 & labjackData.NumDisconnects ==0),{'Time','MillisecondDiff','relativeMillisecondsSinceRecordingStart','Water1_BeamBreak','Water2_BeamBreak','Food1_BeamBreak','Food2_BeamBreak'});
%beambreakSignals = table2array(beambreakSignalsTable(:,4:end));
%% Diff the Subtable to find the transition indicies
%% Looks for values of the difference greater than 0.01 (although in theory we're only looking for any non-zero value.
%beambreakSignalsDiff = abs(diff(beambreakSignals));

% behavioralBox_470017560_20190605_Combined
% 65.68 - 67.73 

% behavioralBox_470017560_20190605_Combined
% 65.33 - 67.39

%% Save out the compressed version
% SaveEventOnlyCompressed
% outputFilePath = 1;

% [OutputDeltaIdxs, OutputDeltaTimestamps,compressedFilepath] = SaveEventOnlyCompressed(OutputDeltaIdxs, OutputDeltaTimestamps, outputFilePath);
% % [FinalOutputDeltas, FinalOutputDeltaTimestamps,compressedFilepath] = SaveEventOnlyCompressed(OutputDeltaIdxs, OutputDeltaTimestamps, outputFilePath);
1;

%% Save out the Python Data:
%NOT SURE WHAT THIS IS FOR: BW
% LabjackDataToPython
