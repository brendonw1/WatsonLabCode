%% PostProcessConcatenatedCSV.m
% Parses a .csv file generated by either my phoBehavioralBoxLabjackController, Labjack's LJLogM program, or several .CSV files of these formats that have been properly concatenated. The Arduino running the behavior box code is connected to the Labjack's digital input ports. 'SensorChanged' and 'Dispense' events are logged and stored in the .csv file. This script parses those beambreak state changed signals into regions where the beam is broken and when it isn't and then calls further post-processing scripts to save them in several formats.

addpath(genpath('../HelperFunctions'));
addpath(genpath('../CompressedEventsFormat'));

%% Set default datetime display properties (this doesn't affect the values stored, only their display/preview in MATLAB)
datetime.setDefaultFormats('default','yyyy-MM-dd HH:mm:ss.SSS');
time_reference = datenum('1970', 'yyyy');

% if ~exist('filePath','var')
    [fileName, parentPath, filterindex] = uigetfile('*.csv;*.mat', 'Select a Labjack exported .CSV File', 'MultiSelect', 'off');
    filePath = fullfile(parentPath,fileName);
% end

%%
labjackData = importCombinedLabjackCSV(filePath); 


labjackData.dateTime = datetime(labjackData.Time, 'convertFrom','epochtime','Epoch','1904-01-01');
labjackData.dateTime = labjackData.dateTime - hours(4); % to translate from GMT to Michigan timezone
%labjackData.intraSampleTime = [0; diff(labjackData.dateTime)];
labjackData.intraSampleTime = [0; diff(labjackData.Time)];
labjackData.samplingRate = round(1.0 ./ labjackData.intraSampleTime);
avgSamplingRate = mean(labjackData.samplingRate(2:end));

% Convert the table to a timetable
labjackTimeTable = table2timetable(labjackData,'RowTimes','dateTime');

labjackTimeTable.intraSampleTime = [0; diff(labjackTimeTable.Time)];

mean(diff(labjackTimeTable.Time))

%% Video File Analysis:
% videoFile = videoFilesData(1);
% %labjackData.relativeVideoFileTimes = labjackData.dateTime - videoFile.parsedDateTime;
% duration = videoFile.parsedEndDateTime - videoFile.parsedDateTime
% labjackData.relativeVideoFileTimes = (labjackData.dateTime - videoFile.parsedDateTime) + duration;
% outOfBoundsIndicies = find(isbetween(labjackData.dateTime, videoFile.parsedDateTime, videoFile.parsedEndDateTime));
% labjackData.relativeVideoFileTimes(outOfBoundsIndicies) = NaN;

%labjackData.relativeVideoFileTimes = rowfun(videoFilesData(1).getRelativeTime, labjackData.dateTime) ;


%% Transitions Analysis
disp('BeamBreak Events:')
beambreakTransitions.Water1_BeamBreak = [0; diff(labjackData.DIO0)];
beambreakTransitions.Water2_BeamBreak = [0; diff(labjackData.DIO1)];
beambreakTransitions.Food1_BeamBreak = [0; diff(labjackData.DIO2)];
beambreakTransitions.Food2_BeamBreak = [0; diff(labjackData.DIO3)];

% Look for transitions to negative values (falling edges)
beambreakTransitionsIndicies.Water1_BeamBreak = find(beambreakTransitions.Water1_BeamBreak < -0.01);
beambreakTransitionsIndicies.Water2_BeamBreak = find(beambreakTransitions.Water2_BeamBreak < -0.01);
beambreakTransitionsIndicies.Food1_BeamBreak = find(beambreakTransitions.Food1_BeamBreak < -0.01);
beambreakTransitionsIndicies.Food2_BeamBreak = find(beambreakTransitions.Food2_BeamBreak < -0.01);

EventCounts.Water1_BeamBreak = length(beambreakTransitionsIndicies.Water1_BeamBreak);
EventCounts.Water2_BeamBreak = length(beambreakTransitionsIndicies.Water2_BeamBreak);
EventCounts.Food1_BeamBreak = length(beambreakTransitionsIndicies.Food1_BeamBreak);
EventCounts.Food2_BeamBreak = length(beambreakTransitionsIndicies.Food2_BeamBreak);

numSamples = length(beambreakTransitions.Water1_BeamBreak);

labjackTimeTable.Water1_BeamBreak = zeros([numSamples 1]);
labjackTimeTable.Water2_BeamBreak = zeros([numSamples 1]);
labjackTimeTable.Food1_BeamBreak = zeros([numSamples 1]);
labjackTimeTable.Food2_BeamBreak = zeros([numSamples 1]);

labjackTimeTable.Water1_BeamBreak(beambreakTransitionsIndicies.Water1_BeamBreak) = 1.0;
labjackTimeTable.Water2_BeamBreak(beambreakTransitionsIndicies.Water2_BeamBreak) = 1.0;
labjackTimeTable.Food1_BeamBreak(beambreakTransitionsIndicies.Food1_BeamBreak) = 1.0;
labjackTimeTable.Food2_BeamBreak(beambreakTransitionsIndicies.Food2_BeamBreak) = 1.0;



%% Dispense Events
disp('Dispense Events:')
beambreakTransitions.Water1_Dispense = [0; diff(labjackData.DIO4)];
beambreakTransitions.Water2_Dispense = [0; diff(labjackData.DIO5)];
beambreakTransitions.Food1_Dispense = [0; diff(labjackData.DIO6)];
beambreakTransitions.Food2_Dispense = [0; diff(labjackData.DIO7)];

beambreakTransitionsIndicies.Water1_Dispense = find(beambreakTransitions.Water1_Dispense > 0.01);
beambreakTransitionsIndicies.Water2_Dispense = find(beambreakTransitions.Water2_Dispense > 0.01);
beambreakTransitionsIndicies.Food1_Dispense = find(beambreakTransitions.Food1_Dispense > 0.01);
beambreakTransitionsIndicies.Food2_Dispense = find(beambreakTransitions.Food2_Dispense > 0.01);

% Look for transitions to negative values (falling edges)
% beambreakTransitionsIndicies.Water1_Dispense = find(beambreakTransitions.Water1_Dispense < -0.01);
% beambreakTransitionsIndicies.Water2_Dispense = find(beambreakTransitions.Water2_Dispense < -0.01);
% beambreakTransitionsIndicies.Food1_Dispense = find(beambreakTransitions.Food1_Dispense < -0.01);
% beambreakTransitionsIndicies.Food2_Dispense = find(beambreakTransitions.Food2_Dispense < -0.01);

EventCounts.Water1_Dispense = length(beambreakTransitionsIndicies.Water1_Dispense);
EventCounts.Water2_Dispense = length(beambreakTransitionsIndicies.Water2_Dispense);
EventCounts.Food1_Dispense = length(beambreakTransitionsIndicies.Food1_Dispense);
EventCounts.Food2_Dispense = length(beambreakTransitionsIndicies.Food2_Dispense);

labjackTimeTable.Water1_Dispense = zeros([numSamples 1]);
labjackTimeTable.Water2_Dispense = zeros([numSamples 1]);
labjackTimeTable.Food1_Dispense = zeros([numSamples 1]);
labjackTimeTable.Food2_Dispense = zeros([numSamples 1]);

labjackTimeTable.Water1_Dispense(beambreakTransitionsIndicies.Water1_Dispense) = 1.0;
labjackTimeTable.Water2_Dispense(beambreakTransitionsIndicies.Water2_Dispense) = 1.0;
labjackTimeTable.Food1_Dispense(beambreakTransitionsIndicies.Food1_Dispense) = 1.0;
labjackTimeTable.Food2_Dispense(beambreakTransitionsIndicies.Food2_Dispense) = 1.0;


%% Neuroscope Output Times
recordingStartTime = labjackData.dateTime(1);

transitionTimes.Water1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Water1_BeamBreak);
transitionTimes.Water2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Water2_BeamBreak);
transitionTimes.Food1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Food1_BeamBreak);
transitionTimes.Food2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Food2_BeamBreak);

% Computes relative to recording start:
transitionTimes.Water1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Water1_BeamBreak) - recordingStartTime;
transitionTimes.Water2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Water2_BeamBreak) - recordingStartTime;
transitionTimes.Food1_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Food1_BeamBreak) - recordingStartTime;
transitionTimes.Food2_BeamBreak = labjackData.dateTime(beambreakTransitionsIndicies.Food2_BeamBreak) - recordingStartTime;


% relTimes = struct2table(transitionTimes) - recordingStartTime;

%transitionTimesTable = table(transitionTimes.Water1_BeamBreak, transitionTimes.Water2_BeamBreak, transitionTimes.Food1_BeamBreak, transitionTimes.Food2_BeamBreak);
%transitionTimesTable.relativeTimes = 

% EventCounts;


%dailyMean = retime(labjackTimeTable,'daily','mean');
%histcounts
%TT = retime(labjackTimeTable,'daily','sum');
%TT = retime(labjackTimeTable,'hourly','sum','IncludedEdge','right');
% binnedEventsTimetable = retime(labjackTimeTable(:,11:end),'hourly','sum','IncludedEdge','right');
% [fig] = PlotBinnedEventsTimetable(binnedEventsTimetable, 'Port Events: binned hourly');

% binnedEventsTimetable = retime(labjackTimeTable(:,11:end),'daily','sum','IncludedEdge','right');
% [fig, axH] = PlotBinnedEventsTimetable(binnedEventsTimetable, 'Port Events: binned daily');

%% Stacked Plot output: RAW Data
% figure(1)
% clf;
% % Format Output Variables
% vars = {{'Water1_BeamBreak','Water1_Dispense'},{'Water2_BeamBreak','Water2_Dispense'},{'Food1_BeamBreak','Food1_Dispense'},{'Food2_BeamBreak','Food2_Dispense'}};
% newYlabels = {'Water0','Water1','Food0','Food1'};
% stackedAggregatePlot = stackedplot(TT,vars,'DisplayLabels',newYlabels);
% title('Parsed Labjack Events')
% stackedAggregatePlot.LineProperties(1).PlotType = 'stairs';
% stackedAggregatePlot.LineProperties(2).PlotType = 'stairs';
% stackedAggregatePlot.LineProperties(3).PlotType = 'stairs';
% stackedAggregatePlot.LineProperties(4).PlotType = 'stairs';
% 
% %% Stacked Plot output: Binned Events
% figure(2)
% clf;
% % Format Output Variables
% vars = {{'DIO0','DIO4'},{'DIO1','DIO5'},{'DIO2','DIO6'},{'DIO3','DIO7'},'TEMPERATURE_AIR_K'};
% degreeSymbol = char(176);
% newYlabels = {'Water0','Water1','Food0','Food1',['T (' degreeSymbol 'F)']};
% %stackedplot(labjackTimeTable,vars,'XVariable','dateTime','DisplayLabels',newYlabels);
% stackedRawPlot = stackedplot(labjackTimeTable,vars,'DisplayLabels',newYlabels);
% title('Raw Labjack Data')

%%
% Compute the difference between each time in milliseconds. Include 0 as the offset for the first point.
% labjackData.IntraSampleDelay = [0; diff(labjackData.Time)];
% labjackData.IntraSampleDelay.Format = 'hh:mm:ss.SSSSSSS';
% labjackData.MillisecondDiff = milliseconds(labjackData.IntraSampleDelay);
% Compute the relativeMillisecondsSinceRecordingStart
%labjackData.relativeMillisecondsSinceRecordingStart = CumSum(labjackData.MillisecondDiff);

%% Find the relevent entries in the table and create a subtable
%%
%beambreakSignalsTable = labjackData((labjackData.ErrorCode == 0 & labjackData.NumDisconnects ==0),{'Time','MillisecondDiff','relativeMillisecondsSinceRecordingStart','Water1_BeamBreak','Water2_BeamBreak','Food1_BeamBreak','Food2_BeamBreak'});
%beambreakSignals = table2array(beambreakSignalsTable(:,4:end));
%% Diff the Subtable to find the transition indicies
%% Looks for values of the difference greater than 0.01 (although in theory we're only looking for any non-zero value.
%beambreakSignalsDiff = abs(diff(beambreakSignals));

% behavioralBox_470017560_20190605_Combined
% 65.68 - 67.73 

% behavioralBox_470017560_20190605_Combined
% 65.33 - 67.39

%% Save out the compressed version
SaveEventOnlyCompressed

%% Save out the Python Data:
LabjackDataToPython
