function [HighlyMobile, Mobile, Immobile] = importPhoPaulFSTAnalysisFiles(workbookFile, sheetName, dataLines)
%IMPORTFILE Import data from a spreadsheet
%  DONEBJOSHPHOANALYSIS3S2 = IMPORTFILE(FILE) reads data from the first
%  worksheet in the Microsoft Excel spreadsheet file named FILE.
%  Returns the data as a table.
%
%  DONEBJOSHPHOANALYSIS3S2 = IMPORTFILE(FILE, SHEET) reads from the
%  specified worksheet.
%
%  DONEBJOSHPHOANALYSIS3S2 = IMPORTFILE(FILE, SHEET, DATALINES) reads
%  from the specified worksheet for the specified row interval(s).
%  Specify DATALINES as a positive scalar integer or a N-by-2 array of
%  positive scalar integers for dis-contiguous row intervals.
%
%  Example:
%  donebjoshphoanalysis3S2 = importfile("C:\Users\halechr\repo\PhoPaulFSTAnalysis-7-26-19\Data\4-6doneb_josh-pho_analysis_3.0.xlsx", "6doneb", [4, 11]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 2019-07-26 17:18:46.563

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin == 2
%     dataLines = [4, 11; 13, 20];
%     if strcmp(sheetName,'4doneb')
%         numBlocks = 11;
%     elseif strcmp(sheetName,'5doneb')
%         numBlocks = 9;
%     elseif strcmp(sheetName,'6doneb')
%         numBlocks = 2;
%     elseif strcmp(sheetName,'Expt 1')
%         numBlocks = 6;
%     elseif strcmp(sheetName,'Expt 2')
%         numBlocks = 6;
%     elseif strcmp(sheetName,'Expt 3')
%         numBlocks = 6;
%     elseif strcmp(sheetName,'Expt 4')
%         numBlocks = 2;
%     elseif strcmp(sheetName,'Expt 5')
%         numBlocks = 10;
%     else
%         printf('importPhoPaulFSTAnalysisFiles(...): WARNING: Unrecognized sheet name! Only one block can be inferred! \n');
%         numBlocks = 1;
%     end

% Old system above - particular number of lines per sheet
% New system assumes a max number of blocks/FSTs and then looks for NaNs to
% exclude places without blocks
    numBlocks = 12;

    currStartLine = 4;
    numLinesPerBlock = 8;
    currEndLine = (currStartLine + numLinesPerBlock) - 1;
    dataLines = [currStartLine, currEndLine];
    for i = 2:numBlocks
       currStartLine = currStartLine + 8 + 1;
       currEndLine = (currStartLine + numLinesPerBlock) - 1;
       dataLines = [dataLines; currStartLine, currEndLine];
    end
%     dataLines = [4, 11; 13, 20; 22, 29;];
%     dataLines = [4, 11; 13, 20];
end

%% Setup the Import Options
opts = spreadsheetImportOptions("NumVariables", 15);

% Specify sheet and range
opts.Sheet = sheetName;
opts.DataRange = "A" + dataLines(1, 1) + ":O" + dataLines(1, 2);

% Specify column names and types
opts.VariableNames = ["Var1", "HighlyMobile_veh", "HighlyMobile_dpz002", "HighlyMobile_dpz02", "HighlyMobile_dpz2", "Var6", "Mobile_veh", "Mobile_dpz002", "Mobile_dpz02", "Mobile_dpz2", "Var11", "Immobile_veh", "Immobile_dpz002", "Immobile_dpz02", "Immobile_dpz2"];
opts.SelectedVariableNames = ["HighlyMobile_veh", "HighlyMobile_dpz002", "HighlyMobile_dpz02", "HighlyMobile_dpz2", "Mobile_veh", "Mobile_dpz002", "Mobile_dpz02", "Mobile_dpz2", "Immobile_veh", "Immobile_dpz002", "Immobile_dpz02", "Immobile_dpz2"];
opts.VariableTypes = ["char", "double", "double", "double", "double", "char", "double", "double", "double", "double", "char", "double", "double", "double", "double"];
opts = setvaropts(opts, [1, 6, 11], "WhitespaceRule", "preserve");
opts = setvaropts(opts, [1, 6, 11], "EmptyFieldRule", "auto");

% Import the data
donebjoshphoanalysis3S2 = readtable(workbookFile, opts, "UseExcel", false);

for idx = 2:size(dataLines, 1)
    opts.DataRange = "A" + dataLines(idx, 1) + ":O" + dataLines(idx, 2);
    tb = readtable(workbookFile, opts, "UseExcel", false);
    donebjoshphoanalysis3S2 = [donebjoshphoanalysis3S2; tb]; %#ok<AGROW>
end

idx = findemptyblocks(donebjoshphoanalysis3S2.HighlyMobile_veh,numLinesPerBlock);
HighlyMobile.veh = donebjoshphoanalysis3S2.HighlyMobile_veh(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.HighlyMobile_dpz002,numLinesPerBlock);
HighlyMobile.dpz002 = donebjoshphoanalysis3S2.HighlyMobile_dpz002(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.HighlyMobile_dpz02,numLinesPerBlock);
HighlyMobile.dpz02 = donebjoshphoanalysis3S2.HighlyMobile_dpz02(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.HighlyMobile_dpz2,numLinesPerBlock);
HighlyMobile.dpz2 = donebjoshphoanalysis3S2.HighlyMobile_dpz2(idx);

idx = findemptyblocks(donebjoshphoanalysis3S2.Mobile_veh,numLinesPerBlock);
Mobile.veh = donebjoshphoanalysis3S2.Mobile_veh(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.Mobile_dpz002,numLinesPerBlock);
Mobile.dpz002 = donebjoshphoanalysis3S2.Mobile_dpz002(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.Mobile_dpz02,numLinesPerBlock);
Mobile.dpz02 = donebjoshphoanalysis3S2.Mobile_dpz02(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.Mobile_dpz2,numLinesPerBlock);
Mobile.dpz2 = donebjoshphoanalysis3S2.Mobile_dpz2(idx);

idx = findemptyblocks(donebjoshphoanalysis3S2.Immobile_veh,numLinesPerBlock);
Immobile.veh = donebjoshphoanalysis3S2.Immobile_veh(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.Immobile_dpz002,numLinesPerBlock);
Immobile.dpz002 = donebjoshphoanalysis3S2.Immobile_dpz002(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.Immobile_dpz02,numLinesPerBlock);
Immobile.dpz02 = donebjoshphoanalysis3S2.Immobile_dpz02(idx);
idx = findemptyblocks(donebjoshphoanalysis3S2.Immobile_dpz2,numLinesPerBlock);
Immobile.dpz2 = donebjoshphoanalysis3S2.Immobile_dpz2(idx);


end


function idx = findemptyblocks(vals,numLinesPerBlock)
%evaluates a whole block at a time - if all values are zero in that block,
%will set that block to not be used by setting an boolean val of 0.
%if any non-non in the block, the booleans for the whole block will remain
%1
idx = ones(size(vals));
nanstatus = isnan(vals);
numblocks = ceil(length(vals)/numLinesPerBlock);
for a = numblocks:-1:1
    tindices = [a-1]*numLinesPerBlock+1 : a*numLinesPerBlock;
    tnans = nanstatus(tindices);
    if all(tnans)
        idx(tindices) = 0;
    end
end
idx = logical(idx);

end