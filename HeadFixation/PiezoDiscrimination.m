function PiezoDiscrimination

% Trains mice to discriminate between two piezoelectric stimuli (4 Hz and
% 10 Hz) under a Go/No-go reinforcement schedule. Preferably, mice should
% be pre-trained to obtain water from the lickometer.
%
%
%
% NECESSARY HARDWARE ______________________________________________________
% - Bpod State Machine combined with Bpod Analog Output Module: reads
%   stimulation parameters, sends waveforms to the Dagan Biphasic
%   Stimulus Isolator, and corresponding timestamps to Intan RHD2000.
%
% - Dagan Biphasic Stimulus Isolator: vibrates the glass capillary based on
%   inputs from Bpod Analog Output Module, i.e., the waveforms to be
%   piezoelectrically converted.
%
% - Intan RHD2000: acquires neural signals aligned with piezoelectric
%   stimuli.
%
%
%
% STIMULATION _____________________________________________________________
% - Piezo waveform -> Inter-stimulus interval (ISI) -> Piezo waveform -> ...
% - Piezo waveform: sinusoidal, 10 V amplitude (+/- 5 V), 1 s duration,
%   either 4 or 10 Hz.
%
%
%
% USAGE ___________________________________________________________________
% Step 1: Load RHD2000 interface, set channels, recording parameters, 
% save-to folder, etc.
%
% Step 2: Run Bpod then PiezoDiscrimination.
%
%
%
% LSBuenoJr _______________________________________________________________



%% Sets base path, asks user about saving a previous session (if present in
% the working directory).
global BpodSystem;
basepath   = cd;

if ~isempty(BpodSystem.Data) || exist('SessionData.mat') %#ok<EXIST>
    prompt = 'Save previous session? (y/n)';
    prompt = input(prompt,'s');
    if strcmp(prompt,'y')
        SessionData = BpodSystem.Data;
        save(fullfile(basepath,...
            'PiezoDiscrimPrevSession.mat'),'SessionData','-v6');
    end
    BpodSystem.Data = [];
end



%% Configures the Bpod Analog Output Module to send waveforms to Dagan.
W                        = BpodWavePlayer('COM6');
W.TriggerMode            = 'Normal';
W.TriggerProfileEnable   = 'On';
W.TriggerProfiles(1,1:8) = [zeros(1,7) 10];  % Out of BNC #8, both profiles
W.TriggerProfiles(2,1:8) = [zeros(1,7) 4];


MaxMinVolt               = 5;  % +/- volts
LowFreqPiezo             = 4;  % Hz
HighFreqPiezo            = 10;
StimDur                  = 1;  % stimulus duration in seconds

W.loadWaveform(4,MaxMinVolt*sin(LowFreqPiezo*2*pi/W.SamplingRate:...
    LowFreqPiezo*2*pi/W.SamplingRate:LowFreqPiezo*2*pi*StimDur));

W.loadWaveform(10,MaxMinVolt*sin(HighFreqPiezo*2*pi/W.SamplingRate:...
    HighFreqPiezo*2*pi/W.SamplingRate:HighFreqPiezo*2*pi*StimDur));



%% Sets parameters (e.g., stimulus durations, inter-trial intervals, etc.).
S.GUI.TrialLength_seconds = 6; % In seconds
S.GUI.RewardAmount_mL     = 5; % In microliters
S.GUI.WaterValveTime      = GetValveTimes(S.GUI.RewardAmount_mL,1);
S.GUI.StimPeriod          = StimDur;
S.GUI.RespPeriod          = 2;
S.GUI.PunishmentPeriod    = 9;

S.GUIPanels.Durations_and_RewardAmount     = {...
    'TrialLength_seconds',...    
    'WaterValveTime',...
    'StimPeriod',...
    'RespPeriod',...
    'PunishmentPeriod',...
    'RewardAmount_mL',...
    };

BpodParameterGUI('init',S);clear ans



%% Randomizes the sequence of trials.
MaxSameTrial = 3; % Limits trial type repetition to three consecutive.
TrialSeq = [zeros(1,5) nan(1,995)]; % Pre-defines five initial trials.
for i    = 6:length(TrialSeq)
    if i > MaxSameTrial
        if sum(TrialSeq((i-MaxSameTrial):(i-1))) == 0
            TrialSeq(i) = 1;
        elseif sum(TrialSeq((i-MaxSameTrial):(i-1))) == MaxSameTrial
            TrialSeq(i) = 0;
        else
            TrialSeq(i) = round(rand(1));
        end
    else
        TrialSeq(i)     = round(rand(1));
    end
end
TrialSeq = TrialSeq+1;

BpodSystem.Data.TrialSeq      = TrialSeq;
BpodSystem.Data.SessionData = nan(size(TrialSeq));



%% Configures the outcome plot to display the behavioral performance
% during the session.
BpodSystem.ProtocolFigures.GoNogoPerfOutcomePlotFig = figure(...
    'Position',[200 100 1400 200],...
    'name','Outcome plot',...
    'numbertitle','off',...
    'MenuBar', 'none',...
    'Resize', 'off',...
    'Color', [1 1 1]);

BpodSystem.GUIHandles.GoNogoPerfOutcomePlot = axes(...
    'Position',[.2 .2 .75 .7]);

uicontrol(....
    'Style','text',...
    'String','nDisplay',...
    'Position',[10 170 45 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor', [1 1 1]);

BpodSystem.GUIHandles.DisplayNTrials = uicontrol(...
    'Style','edit',...
    'string','90',...
    'Position',[55 170 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

uicontrol(...
    'Style','text',...
    'String','Correct % (all): ',...
    'Position',[10 140 80 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

BpodSystem.GUIHandles.hitpct = uicontrol(...
    'Style','text',...
    'string','0',...
    'Position',[95 140 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

uicontrol(...
    'Style','text',...
    'String','Correct % (40): ',...
    'Position',[10 120 80 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

BpodSystem.GUIHandles.hitpctrecent = uicontrol(...
    'Style','text',...
    'string','0',...
    'Position',[95 120 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

uicontrol(...
    'Style','text',...
    'String','Corr rej %: ',...
    'Position',[10 90 80 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

BpodSystem.GUIHandles.hitpctnogo = uicontrol(...
    'Style','text',...
    'string','0',...
    'Position',[95 90 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

uicontrol(...
    'Style','text',...
    'String','Hit % : ',...
    'Position',[10 70 80 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

BpodSystem.GUIHandles.hitpctgo = uicontrol(...
    'Style','text',...
    'string','0',...
    'Position',[95 70 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

uicontrol(...
    'Style','text',...
    'String','Trials: ',...
    'Position',[10 40 80 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor', [1 1 1]);

BpodSystem.GUIHandles.numtrials = uicontrol(...
    'Style','text',...
    'string','0',...
    'Position',[95 40 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

uicontrol(...
    'Style','text',...
    'String','Rewards: ',...
    'Position',[10 20 80 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor',[1 1 1]);

BpodSystem.GUIHandles.numrewards = uicontrol(...
    'Style','text',...
    'string','0',...
    'Position',[95 20 40 15],...
    'HorizontalAlignment','left',...
    'BackgroundColor', [1 1 1]);

BpodSystem.GUIHandles.CxnDisplay = uicontrol(...
    'Style','text',...
    'string','Playing',...
    'Position',[130 90 70 20],...
    'HorizontalAlignment','left',...
    'BackgroundColor', [1 1 1]);

TrialTypeOutcomePlot(BpodSystem.GUIHandles.GoNogoPerfOutcomePlot,...
    'init',BpodSystem.Data.TrialSeq);



%% Main loop
Outcomes = nan(size(TrialSeq));StimType = cell(1);Action = cell(1);
for i = 1:length(TrialSeq)
    
    % Synchronizes with BpodParameterGUI plugin and outcome plot.
    S = BpodParameterGUI('sync',S); 
    TrialTypeOutcomePlot(...
        BpodSystem.GUIHandles.GoNogoPerfOutcomePlot,'update',...
        i,BpodSystem.Data.TrialSeq,Outcomes);
    
    % Displays trials on the command window and saves trials settings.
    if TrialSeq(i)     == 1
        str             = 'Go trial (10 Hz piezo)'; % NEED TO COUNTER-BALANCE THIS ACROSS SUBJECTS!
        StimType{i}     = 'HighFreq_piezo';
        Action{i}       = 'Hit';
    elseif TrialSeq(i) == 2
        str             = 'No-go trial(4 Hz piezo)';
        StimType{i}     = 'LowFreq_piezo';
        Action{i}       = 'FalseAlarm';
    end
    
    disp(['Trial #' num2str(i) ...
        ', ' str ' (' num2str(TrialSeq(i)) ')'])
    BpodSystem.Data.TrialSettings(i) = S;
    
    % Sets Bpod state matrix using piezo stimuli ("StimType{i}"), and
    % hits or false alarms ("Action{i}") defined above.
    sma     = NewStateMatrix();
    sma     = PiezoDiscrim_Matrix(sma,S,Action{i},StimType{i});
    SendStateMachine(sma);
    RawEvents = RunStateMachine;
    
    % Allocates trials as states into the "BpodSystem.Data" structure.
    if ~isempty(fieldnames(RawEvents))
        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents);
        if TrialSeq(i)     == 1   % Go trial
            if ~isnan(BpodSystem.Data.RawEvents.Trial{i}.States.Hit(1))
                Outcomes(i) = 1;  % Hit
            elseif ~isnan(BpodSystem.Data.RawEvents.Trial{i}.States.TimeOut(1))
                Outcomes(i) = -1; % Miss
            else
            end
        elseif TrialSeq(i) == 2   % No-go trial
            if ~isnan(BpodSystem.Data.RawEvents.Trial{i}.States.FalseAlarm(1))
                Outcomes(i) = 0;  % False alarm
            elseif ~isnan(BpodSystem.Data.RawEvents.Trial{i}.States.TimeOut(1))
                Outcomes(i) = 2;  % Correct rejection
            else
            end
        end
        BpodSystem.Data.SessionData(i) = Outcomes(i);
        BpodSystem.ProtocolSettings = S;
        
        % Saves trial outcomes and timestamps.
        SessionData = BpodSystem.Data;
        save(fullfile(basepath,'SessionData.mat'),'SessionData','-v6');
    end
    
    if BpodSystem.Status.BeingUsed == 0;return;end
    correct          = Outcomes    == 1 | Outcomes == 2;
    hitgo            = Outcomes    == 1;
    hitnogo          = Outcomes    == 2;
    correctpct       = 100.*sum(correct)./i;
    hitpctgo         = 100.*sum(hitgo)./sum(TrialSeq(1:i));
    hitpctnogo       = 100.*sum(hitnogo)./sum(TrialSeq(1:i) == 0);
    inds40           = max(1,i-40+1):i;
    correctpctrecent = 100.*sum(correct(inds40))./numel(inds40);

    set(BpodSystem.GUIHandles.hitpct,...
        'String', num2str(correctpct));
    
    set(BpodSystem.GUIHandles.hitpctrecent,...
        'String', num2str(correctpctrecent));
    
    set(BpodSystem.GUIHandles.hitpctgo,...
        'String', num2str(hitpctgo));
    
    set(BpodSystem.GUIHandles.hitpctnogo,...
        'String', num2str(hitpctnogo));
    
    set(BpodSystem.GUIHandles.numtrials,...
        'String',num2str(i));
    
    set(BpodSystem.GUIHandles.numrewards,...
        'String', num2str(sum(hitgo)));
    
    if BpodSystem.Status.BeingUsed == 0
        return
    end
end



%% Bpod conversation via state matrix
function sma = PiezoDiscrim_Matrix(sma,S,CurrentAction,CurrentStimType)

% Communicates the State Machine with the Analog Output Module.
LoadSerialMessages('WavePlayer1',{['P' 0],['P' 1]});

% Sets states and their timers, subsequent events, and output actions.
sma = SetGlobalTimer(sma,...
    'TimerID',1,...
    'Duration',S.GUI.TrialLength_seconds);

sma = AddState(sma,'Name','TrialStart',...
    'Timer',0.1,...
    'StateChangeConditions',{'Tup',CurrentStimType},...
    'OutputActions',{'GlobalTimerTrig',1,});

sma = AddState(sma,'Name','HighFreq_piezo',...
    'Timer',S.GUI.StimPeriod,...
    'StateChangeConditions',{'Tup','ResponseWindow'},...
    'OutputActions',{'WavePlayer1',1,'Wire2',1}); % BNC #8 of the Analog
                                        % Module sends the 10 Hz waveform,
                                        % and wire #2 sends a digital stamp

sma = AddState(sma,'Name','LowFreq_piezo',...
    'Timer', S.GUI.StimPeriod,...
    'StateChangeConditions',{'Tup','ResponseWindow'},...
    'OutputActions',{'WavePlayer1',2,'Wire3',1}); % BNC #8 of the Analog
                                        % Module sends the 4 Hz waveform,
                                        % and wire #3 sends a digital stamp

sma = AddState(sma,'Name','ResponseWindow',...
    'Timer',S.GUI.RespPeriod,...
    'StateChangeConditions',{'Port1In',CurrentAction,'Tup','TimeOut'},...
    'OutputActions',{'Wire1',1}); % Response window out of wire #1 to Intan

sma = AddState(sma,'Name','Hit',...
    'Timer',S.GUI.WaterValveTime,...
    'StateChangeConditions',{'Tup','TimeOut'},...
    'OutputActions',{'ValveState',1,'BNC1',1}); % Rewarded response, and  
                                                % corresponding event out
                                                % of the State Machine 
                                                % (BNC #1) to Intan

sma = AddState(sma,'Name','FalseAlarm',...
    'Timer',0.1,...
    'StateChangeConditions',{'Tup','FalseAlarm_timeout'},...
    'OutputActions',{'BNC1',1,'PWM1',200}); % Onset of punishment time out
                                            % from BNC #1 of State Machine
                                            % to Intan, along with a
                                            % 0.1 s light cue
                                            
sma = AddState(sma,'Name','FalseAlarm_timeout',...
    'Timer',S.GUI.PunishmentPeriod-0.1,...
    'StateChangeConditions',{'Tup','exit','Port1In','FalseAlarm_timeout'},...
    'OutputActions',{'BNC1',1}); % Remaining time out period

sma = AddState(sma,'Name','TimeOut',...
    'Timer',10,...
    'StateChangeConditions',{'GlobalTimer1_End','exit'},...
    'OutputActions',{});
end



end